"use strict";(self.webpackChunkaoijs_docs=self.webpackChunkaoijs_docs||[]).push([[60014],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},66492:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"$jsonRequest",description:"Retrieve a JSON format (api)"},i=void 0,l={unversionedId:"functions/jsonrequest",id:"functions/jsonrequest",title:"$jsonRequest",description:"Retrieve a JSON format (api)",source:"@site/docs/functions/jsonrequest.md",sourceDirName:"functions",slug:"/functions/jsonrequest",permalink:"/docs/functions/jsonrequest",draft:!1,tags:[],version:"current",frontMatter:{title:"$jsonRequest",description:"Retrieve a JSON format (api)"},sidebar:"someSidebar",previous:{title:"$joinVC",permalink:"/docs/functions/joinvc"},next:{title:"$kick",permalink:"/docs/functions/kick"}},s={},p=[{value:"Usage",id:"usage",level:3},{value:"Fields",id:"fields",level:3},{value:"Types of Header",id:"types-of-header",level:4},{value:"Example",id:"example",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This function returns a property from a JSON formatted api."),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$jsonRequest[api;property?;error?;headerName:headerValue?...]\n")),(0,a.kt)("h3",{id:"fields"},"Fields"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"api"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The api from which the specified property is to be retrieved"),(0,a.kt)("td",{parentName:"tr",align:"left"},"link"),(0,a.kt)("td",{parentName:"tr",align:"left"},"yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"property"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The property that is to be retrieved from the api"),(0,a.kt)("td",{parentName:"tr",align:"left"},"alphanumeric"),(0,a.kt)("td",{parentName:"tr",align:"left"},"no")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"error"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The error to be displayed if the property wasn't found"),(0,a.kt)("td",{parentName:"tr",align:"left"},"alphanumeric"),(0,a.kt)("td",{parentName:"tr",align:"left"},"no")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"header"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The header that is to be retrieved from the api"),(0,a.kt)("td",{parentName:"tr",align:"left"},"headerName:headerValue"),(0,a.kt)("td",{parentName:"tr",align:"left"},"no")))),(0,a.kt)("h4",{id:"types-of-header"},"Types of Header"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"normal: ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"A:hi;B:Bye\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"json: ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'{ "A" : "hi", "B" : "bye" }\n')),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'bot.command({\nname: "api", \ncode: `$jsonRequest[https://some-random-api.ml/facts/dog;fact;Could not fnd a dog fact!]`\n})\n/*\n\nAPI Breakdown:\nIn this api given, if you go to the link it will give you\n{"fact":"Putting collars on dogs is an ancient practice, but dog licenses are much more recent."}\nSo in \'property\', you\'d put "fact", because it\'s the only property there to get\nEx:\n$jsonRequest[https://some-random-api.ml/facts/dog;fact;Could not fnd a dog fact!]`\n\n\nBut what if the api was like this:\n{"dog": {"fact":"Putting collars on dogs is an ancient practice, but dog licenses are much more recent."} }\nThen in property, first you\'d\nneed to get "dog", so you\'d put \'dog\', then to get the fact\nadd fact after it, like this: \'dog.fact\'\nEx:\n$jsonRequest[https://some-random-api.ml/facts/dog;dog.fact;Could not fnd a dog fact!]`\n\n\nBut let\'s say the api has brackets around the thing you\nwant to get:\n{"dog": [{"fact":"Putting collars on dogs is an ancient practice, but dog licenses are much more recent."}] }\nSo in property, you will still have \'dog\' first,\nthen you\'d add brackets as follows: \'dog[0]\' \nthen simply add on fact. \'dog[0].fact\'\nWARNING: For DBD.js instead of [] we use #RIGHT# for [ and #LEFT# for ]\nEx:\n$jsonRequest[https://some-random-api.ml/facts/dog;dog#RIGHT#0#LEFT#.fact;Could not fnd a dog fact!]`\n\n\n*/\n')))}d.isMDXComponent=!0}}]);